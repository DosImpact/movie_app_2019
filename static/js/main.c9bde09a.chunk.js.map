{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","titel","map","genre","index","key","slice","propType","PropTypes","number","isRequired","string","arrayOf","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kVA4BA,SAASA,EAAT,GAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,yBAAKC,UAAU,SACb,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOO,MAAOP,IACrC,yBAAKI,UAAU,eACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,UACXD,EAAOK,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAON,UAAU,iBACvBK,OAIP,uBAAGL,UAAU,kBAAkBH,EAAQW,MAAM,EAAG,KAAhD,SAMRd,EAAMe,SAAW,CACfd,KAAMe,IAAUC,OAAOC,WACvBhB,MAAOc,IAAUG,OAAOD,WACxBf,QAASa,IAAUG,OAAOD,WAC1Bd,OAAQY,IAAUG,OAAOD,WACzBb,OAAQW,IAAUI,QAAQJ,IAAUG,QAAQD,YAE/BlB,QC+CAqB,G,iNA5CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,4DANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAKZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IARzB,2C,mFAWVQ,KAAKN,c,+BAEG,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,6BAASlB,UAAU,aAChBiB,EACC,yBAAKjB,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZkB,EAAOd,KAAI,SAAAsB,GAAK,OACf,kBAAC,EAAD,CACEnB,IAAKmB,EAAMC,GACXA,GAAID,EAAMC,GACVhC,KAAM+B,EAAM/B,KACZC,MAAO8B,EAAM9B,MACbC,QAAS6B,EAAM7B,QACfC,OAAQ4B,EAAME,mBACd7B,OAAQ2B,EAAM3B,kB,GApCZ8B,IAAMC,YCjDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c9bde09a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n/*\r\n    - JSX js의 스타일 적용\r\n    <h3 class=\"movie__title\" style={{ backgroundColor: \"red\" }}>\r\n\r\n    - map function은 또다른 키 인자를 너한테 준다.\r\n\r\n        <ul className=\"genres\">\r\n          {genres.map(genre => (\r\n            <li className=\"genres__genre\">{genre}</li>\r\n          ))}\r\n        </ul>\r\n        여기서 나오는 id 애러를 해결할 수 있다.\r\n\r\n\r\n        <ul className=\"genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"genres__genre\">\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        \r\n    - string.slice\r\n    <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n*/\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} titel={title}></img>\r\n      <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"genres__genre\">\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propType = {\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\nexport default Movie;\r\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n/*\n\n  return <div>{this.state.isLoading ? \"Loading..\" : \"We are ready\"}</div>;\n  return \n\n  최신 ES6 문법으로 다음과 같이 쓴다.\n    const { isLoading } = this.state;\n    return <div>{isLoading ? \"Loading..\" : \"We are ready\"}</div>;\n\n  - 이거는 js문법이다. setTimeout(callback함수,ms초 뒤에));\n    setTimeout(() => { this.setState({ isLoading: false }); } ,  6000);\n\n  - state에 미래에 쓸 변수를 미리 적어두는것은 허용, \n    그리고 setState에서도 새로은 변수를 추가하는것도 허용.!\n  \n  js에서 데이터 API를 받아오는 방법은 fetch가 있다. \n  다른 방법은 Axios 라는 것.\n  npm i axios\n\n  - YTS에서 만든 API를 이용할 거임.\n  https://yts.lt/api\n\n  yts는 불법적인 영화 업로드를 하기떄문에 api주소가 항상 바뀐다.\n  니코가 만든 프록시를 쓰자.\n  https://github.com/serranoarevalo/yts-proxy\n  https://yts-proxy.now.sh/list_movies.json\n\n  API정보는 불러오는데 느릴수있다. 그래서 다 불러올때 까지 기달려야한다. \n  비동기 함수를 만들어서..다음과 같은함수가 끝날때까지 기다려야 한다.\n    \n    getMovies = async () => {\n    const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\"); //not fast !!\n  };\n\n  - ES6 문법으로 다음처름 바꿀 수 있다.\n\n      const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\"); //not fast !!\n      console.log(movies.data.data.movies);\n\n      const {data: {  data: { movies }  } } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\"); //not fast !!\n\n  - react js 덕분에 스타일이 매우 쉬워졌다.\n  style component라는걸 쓴다. 무료 강좌 참고!!\n\n  - 스타일 컴포넌트\n  import \"./App.css\";\n  각 js의 이름에 맞는 컴포넌트를 만들어라.\n\n  - class 컴포넌트 안에  html의 class를 정의하면, JSX는 혼란스러워한다.\n  그래서 html class => html className이라고 써준다.\n\n*/\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    ); //not fast !!\n    this.setState({ movies, isLoading: false });\n  };\n  componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n//<App /> 이것을 컴포넌트라고 부른다. = HTML반환하는 함수.\n//JSX : js + HTML 이다. 컴포넌트를 만들고 붙이고\n\n//한번에 하나의 컴포넌트만 랜더를 해야한다. -> 그래서 App.js 에서 완성되서 나와야 한다.\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}